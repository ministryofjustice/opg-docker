#!/usr/bin/env python

import os
import urllib2
import socket
import subprocess
import json


class DockerConfiguration:

    host_ssh_port = ''
    host_ip_address = ''

    @staticmethod
    def jenkins_defined():
        return os.environ['JENKINS_MASTER_URL'] is not None

    @staticmethod
    def _get_environment_data():
        result = subprocess.check_output(
            ['docker', 'inspect', socket.gethostname()],
            stderr=subprocess.STDOUT
        )
        return result

    def _extract_config_to_vars(self, json_string):
        json_data = json.loads(json_string)[0]
        host_bindings = json_data['NetworkSettings']['Ports']
        self.host_ip_address = os.environ['SLAVE_HOST_IP']
        self.host_ssh_port = host_bindings['22/tcp'][0]['HostPort']

    def __init__(self):
        self._extract_config_to_vars(self._get_environment_data())


class SelfRegistration:
    """
    Class that does the jenkins self registration
    """
    jenkins_url = ''
    config_data = None

    def __init__(self, config_instance):
        self.config_data = config_instance
        self.generate_registration_url()

    def generate_registration_url(self):
        self.jenkins_url = '{}:{}/buildByToken/buildWithParameters' \
                           '?job={}' \
                           '&token={}' \
                           '&REMOTE_HOST={}' \
                           '&SLAVE_NAME={}' \
                           '&REMOTE_PORT={}'\
            .format(
                os.environ['JENKINS_MASTER_URL'],
                os.environ['JENKINS_MASTER_PORT'],
                os.environ['JENKINS_JOB_NAME'],
                os.environ['JENKINS_AUTH_TOKEN'],
                self.config_data.host_ip_address,
                "jenkins_slave_{}".format(socket.gethostname()),
                conf.host_ssh_port
            )
        print self.jenkins_url

    def register(self):
        request = urllib2.Request(self.jenkins_url)

        try:
            response = urllib2.urlopen(request)
            result = response.read()
        except urllib2.URLError as e:
            if hasattr(e, 'reason'):
                print "We failed to reach the jenkins server."
                print "Reason: {}".format(e.reason)
            elif hasattr(e, 'code'):
                print "The server returned a {} response".format(e.code)
        else:
            print result

# Entrypoint
if DockerConfiguration.jenkins_defined():
    conf = DockerConfiguration()
    registration = SelfRegistration(conf)
    registration.register()
else:
    print "Aborting self registration, no Jenkins Master defined"
